import google.generativeai as genai
import os
import logging

# Configure Gemini API key from environment variable
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

# Set up logger
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def generate_summary(facts: str, system_prompt: str = None) -> str:
    """
    Use Gemini Pro to generate a market summary or narrative from facts.

    Args:
        facts (str): Input factual data or brief.
        system_prompt (str, optional): Instruction to shape the style/goal of the response.

    Returns:
        str: Generated summary or error message.
    """
    try:
        model = genai.GenerativeModel('gemini-pro')
        prompt = f"{system_prompt.strip()}\n\n{facts.strip()}" if system_prompt else facts.strip()

        logger.info(f"üîπ Sending prompt to Gemini: {prompt[:100]}...")  # Preview only

        response = model.generate_content(prompt)

        if hasattr(response, 'text'):
            logger.info("‚úÖ Response received from Gemini.")
            return response.text.strip()
        else:
            logger.warning("‚ö†Ô∏è Gemini response missing text content.")
            return "No content generated by Gemini."

    except Exception as e:
        logger.error(f"‚ùå Gemini generation failed: {e}")
        return f"Error generating summary: {str(e)}"

# Example usage
if __name__ == "__main__":
    example_facts = (
        "Asia tech stocks rose 2.3% today. TSMC beat earnings by 5% on strong chip demand. "
        "Samsung's profits dropped 2%, missing analyst expectations."
    )
    system_prompt = "Generate a brief market summary for a finance executive."

    summary = generate_summary(example_facts, system_prompt)
    print(f"\nüìä Generated Summary:\n{summary}")
